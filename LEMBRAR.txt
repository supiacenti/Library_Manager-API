import express from 'express';
import mongoose from 'mongoose';
import multer from 'multer';
import path from 'path';
import fs from 'fs';

// Conectar ao MongoDB
mongoose.connect('mongodb://localhost:27017/mydatabase', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

const app = express();
const port = 3000;

// Esquema e modelo do MongoDB
const Schema = mongoose.Schema;

const userSchema = new Schema({
    name: String,
    email: String,
    phone: String,
    photo: String, // Path to the photo
});

const User = mongoose.model('User', userSchema);

// Middleware para servir arquivos est치ticos
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// Endpoint para buscar dados do usu치rio
app.get('/user/:id', async (req, res) => {
    try {
        const user = await User.findById(req.params.id);
        if (user) {
            res.json(user);
        } else {
            res.status(404).send('User not found');
        }
    } catch (error) {
        res.status(500).send(error);
    }
});

app.listen(port, () => {
    console.log(`Server is running on http://localhost:${port}`);
});


















<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Perfil do Funcion치rio</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f9;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }
        .profile-container {
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            width: 300px;
            text-align: center;
            padding: 20px;
        }
        .profile-container img {
            border-radius: 50%;
            width: 100px;
            height: 100px;
        }
        .profile-container h2 {
            margin: 10px 0 5px 0;
            font-size: 24px;
        }
        .profile-container p {
            color: #666;
        }
    </style>
</head>
<body>
    <div id="profile-container" class="profile-container">
        <!-- Profile content will be loaded here -->
    </div>
    <script src="path/to/your/typescript/file.js"></script>
</body>
</html>





























interface User {
    name: string;
    email: string;
    phone: string;
    photo: string;
}

async function fetchUser(userId: string): Promise<User> {
    const response = await fetch(`http://localhost:3000/user/${userId}`);
    if (!response.ok) {
        throw new Error('Failed to fetch user data');
    }
    return response.json();
}

async function loadUserProfile() {
    const userId = 'your-user-id'; // Replace with actual user ID
    try {
        const user = await fetchUser(userId);
        const profileContainer = document.getElementById('profile-container');
        if (profileContainer) {
            profileContainer.innerHTML = `
                <img src="http://localhost:3000/uploads/${user.photo}" alt="Foto do Funcion치rio">
                <h2>${user.name}</h2>
                <p>Email: ${user.email}</p>
                <p>Telefone: ${user.phone}</p>
            `;
        }
    } catch (error) {
        console.error('Error loading user profile:', error);
    }
}

document.addEventListener('DOMContentLoaded', loadUserProfile);

































